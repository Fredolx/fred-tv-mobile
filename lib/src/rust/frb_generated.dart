// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/m3u.dart';
import 'api/settings.dart';
import 'api/sql.dart';
import 'api/types.dart';
import 'api/utils.dart';
import 'api/xtream.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => 1235363224;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_open_tv',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<ChannelHttpHeaders> crateApiTypesChannelHttpHeadersDefault();

  Future<void> crateApiSqlDeleteDatabase();

  Future<void> crateApiSqlDeleteSource({required PlatformInt64 id});

  Future<void> crateApiUtilsDownload({required Channel channel});

  Future<void> crateApiSqlFavoriteChannel(
      {required PlatformInt64 channelId, required bool favorite});

  Future<String> crateApiSettingsGetDefaultRecordPath();

  Future<List<Source>> crateApiSqlGetEnabledSources();

  Future<void> crateApiXtreamGetEpisodes({required Channel channel});

  Future<void> crateApiM3UGetM3U8FromLink(
      {required Source source, required bool wipe});

  Future<Settings> crateApiSettingsGetSettings();

  Future<List<EPG>> crateApiXtreamGetShortEpg({required Channel channel});

  Future<List<Source>> crateApiSqlGetSources();

  Future<void> crateApiXtreamGetXtream(
      {required Source source, required bool wipe});

  Future<void> crateApiSqlInsertChannelHeaders(
      {required Transaction tx, required ChannelHttpHeaders headers});

  Future<void> crateApiM3UReadM3U8(
      {required Source source, required bool wipe});

  Future<void> crateApiUtilsRefreshAll();

  Future<void> crateApiUtilsRefreshSource({required Source source});

  Future<List<Channel>> crateApiSqlSearch({required Filters filters});

  Future<bool> crateApiSqlSourceNameExists({required String name});

  Future<void> crateApiSettingsUpdateSettings({required Settings settings});

  Future<void> crateApiSqlUpdateSource({required Source source});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transaction;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TransactionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<ChannelHttpHeaders> crateApiTypesChannelHttpHeadersDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_channel_http_headers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesChannelHttpHeadersDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesChannelHttpHeadersDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "channel_http_headers_default",
        argNames: [],
      );

  @override
  Future<void> crateApiSqlDeleteDatabase() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlDeleteDatabaseConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlDeleteDatabaseConstMeta => const TaskConstMeta(
        debugName: "delete_database",
        argNames: [],
      );

  @override
  Future<void> crateApiSqlDeleteSource({required PlatformInt64 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlDeleteSourceConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlDeleteSourceConstMeta => const TaskConstMeta(
        debugName: "delete_source",
        argNames: ["id"],
      );

  @override
  Future<void> crateApiUtilsDownload({required Channel channel}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_channel(channel, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUtilsDownloadConstMeta,
      argValues: [channel],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsDownloadConstMeta => const TaskConstMeta(
        debugName: "download",
        argNames: ["channel"],
      );

  @override
  Future<void> crateApiSqlFavoriteChannel(
      {required PlatformInt64 channelId, required bool favorite}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(channelId, serializer);
        sse_encode_bool(favorite, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlFavoriteChannelConstMeta,
      argValues: [channelId, favorite],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlFavoriteChannelConstMeta => const TaskConstMeta(
        debugName: "favorite_channel",
        argNames: ["channelId", "favorite"],
      );

  @override
  Future<String> crateApiSettingsGetDefaultRecordPath() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsGetDefaultRecordPathConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsGetDefaultRecordPathConstMeta =>
      const TaskConstMeta(
        debugName: "get_default_record_path",
        argNames: [],
      );

  @override
  Future<List<Source>> crateApiSqlGetEnabledSources() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_source,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlGetEnabledSourcesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlGetEnabledSourcesConstMeta =>
      const TaskConstMeta(
        debugName: "get_enabled_sources",
        argNames: [],
      );

  @override
  Future<void> crateApiXtreamGetEpisodes({required Channel channel}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_channel(channel, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiXtreamGetEpisodesConstMeta,
      argValues: [channel],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiXtreamGetEpisodesConstMeta => const TaskConstMeta(
        debugName: "get_episodes",
        argNames: ["channel"],
      );

  @override
  Future<void> crateApiM3UGetM3U8FromLink(
      {required Source source, required bool wipe}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_source(source, serializer);
        sse_encode_bool(wipe, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiM3UGetM3U8FromLinkConstMeta,
      argValues: [source, wipe],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiM3UGetM3U8FromLinkConstMeta => const TaskConstMeta(
        debugName: "get_m3u8_from_link",
        argNames: ["source", "wipe"],
      );

  @override
  Future<Settings> crateApiSettingsGetSettings() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsGetSettingsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsGetSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "get_settings",
        argNames: [],
      );

  @override
  Future<List<EPG>> crateApiXtreamGetShortEpg({required Channel channel}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_channel(channel, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_epg,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiXtreamGetShortEpgConstMeta,
      argValues: [channel],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiXtreamGetShortEpgConstMeta => const TaskConstMeta(
        debugName: "get_short_epg",
        argNames: ["channel"],
      );

  @override
  Future<List<Source>> crateApiSqlGetSources() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_source,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlGetSourcesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlGetSourcesConstMeta => const TaskConstMeta(
        debugName: "get_sources",
        argNames: [],
      );

  @override
  Future<void> crateApiXtreamGetXtream(
      {required Source source, required bool wipe}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_source(source, serializer);
        sse_encode_bool(wipe, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiXtreamGetXtreamConstMeta,
      argValues: [source, wipe],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiXtreamGetXtreamConstMeta => const TaskConstMeta(
        debugName: "get_xtream",
        argNames: ["source", "wipe"],
      );

  @override
  Future<void> crateApiSqlInsertChannelHeaders(
      {required Transaction tx, required ChannelHttpHeaders headers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
            tx, serializer);
        sse_encode_box_autoadd_channel_http_headers(headers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlInsertChannelHeadersConstMeta,
      argValues: [tx, headers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlInsertChannelHeadersConstMeta =>
      const TaskConstMeta(
        debugName: "insert_channel_headers",
        argNames: ["tx", "headers"],
      );

  @override
  Future<void> crateApiM3UReadM3U8(
      {required Source source, required bool wipe}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_source(source, serializer);
        sse_encode_bool(wipe, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiM3UReadM3U8ConstMeta,
      argValues: [source, wipe],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiM3UReadM3U8ConstMeta => const TaskConstMeta(
        debugName: "read_m3u8",
        argNames: ["source", "wipe"],
      );

  @override
  Future<void> crateApiUtilsRefreshAll() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUtilsRefreshAllConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsRefreshAllConstMeta => const TaskConstMeta(
        debugName: "refresh_all",
        argNames: [],
      );

  @override
  Future<void> crateApiUtilsRefreshSource({required Source source}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_source(source, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUtilsRefreshSourceConstMeta,
      argValues: [source],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsRefreshSourceConstMeta => const TaskConstMeta(
        debugName: "refresh_source",
        argNames: ["source"],
      );

  @override
  Future<List<Channel>> crateApiSqlSearch({required Filters filters}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_filters(filters, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_channel,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlSearchConstMeta,
      argValues: [filters],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlSearchConstMeta => const TaskConstMeta(
        debugName: "search",
        argNames: ["filters"],
      );

  @override
  Future<bool> crateApiSqlSourceNameExists({required String name}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlSourceNameExistsConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlSourceNameExistsConstMeta =>
      const TaskConstMeta(
        debugName: "source_name_exists",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSettingsUpdateSettings({required Settings settings}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_settings(settings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsUpdateSettingsConstMeta,
      argValues: [settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsUpdateSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "update_settings",
        argNames: ["settings"],
      );

  @override
  Future<void> crateApiSqlUpdateSource({required Source source}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_source(source, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSqlUpdateSourceConstMeta,
      argValues: [source],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSqlUpdateSourceConstMeta => const TaskConstMeta(
        debugName: "update_source",
        argNames: ["source"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Transaction
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Transaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Channel dco_decode_box_autoadd_channel(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_channel(raw);
  }

  @protected
  ChannelHttpHeaders dco_decode_box_autoadd_channel_http_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_channel_http_headers(raw);
  }

  @protected
  Filters dco_decode_box_autoadd_filters(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_filters(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  Settings dco_decode_box_autoadd_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_settings(raw);
  }

  @protected
  Source dco_decode_box_autoadd_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_source(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Channel dco_decode_channel(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Channel(
      id: dco_decode_opt_box_autoadd_i_64(arr[0]),
      name: dco_decode_String(arr[1]),
      url: dco_decode_opt_String(arr[2]),
      group: dco_decode_opt_String(arr[3]),
      image: dco_decode_opt_String(arr[4]),
      mediaType: dco_decode_u_8(arr[5]),
      sourceId: dco_decode_opt_box_autoadd_i_64(arr[6]),
      seriesId: dco_decode_opt_box_autoadd_u_64(arr[7]),
      groupId: dco_decode_opt_box_autoadd_i_64(arr[8]),
      favorite: dco_decode_bool(arr[9]),
      streamId: dco_decode_opt_box_autoadd_u_64(arr[10]),
    );
  }

  @protected
  ChannelHttpHeaders dco_decode_channel_http_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ChannelHttpHeaders(
      id: dco_decode_opt_box_autoadd_i_64(arr[0]),
      channelId: dco_decode_opt_box_autoadd_i_64(arr[1]),
      referrer: dco_decode_opt_String(arr[2]),
      userAgent: dco_decode_opt_String(arr[3]),
      httpOrigin: dco_decode_opt_String(arr[4]),
      ignoreSsl: dco_decode_opt_box_autoadd_bool(arr[5]),
    );
  }

  @protected
  EPG dco_decode_epg(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return EPG(
      epgId: dco_decode_String(arr[0]),
      title: dco_decode_String(arr[1]),
      description: dco_decode_String(arr[2]),
      startTime: dco_decode_String(arr[3]),
      startTimestamp: dco_decode_i_64(arr[4]),
      endTime: dco_decode_String(arr[5]),
    );
  }

  @protected
  Filters dco_decode_filters(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Filters(
      query: dco_decode_opt_String(arr[0]),
      sourceIds: dco_decode_list_prim_i_64_strict(arr[1]),
      mediaTypes: dco_decode_opt_list_prim_u_8_strict(arr[2]),
      viewType: dco_decode_u_8(arr[3]),
      page: dco_decode_u_8(arr[4]),
      seriesId: dco_decode_opt_box_autoadd_i_64(arr[5]),
      groupId: dco_decode_opt_box_autoadd_i_64(arr[6]),
      useKeywords: dco_decode_bool(arr[7]),
    );
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Channel> dco_decode_list_channel(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_channel).toList();
  }

  @protected
  List<EPG> dco_decode_list_epg(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_epg).toList();
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeInt64List(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Source> dco_decode_list_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_source).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_16(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  Settings dco_decode_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Settings(
      recordingPath: dco_decode_opt_String(arr[0]),
      mpvParams: dco_decode_opt_String(arr[1]),
      useStreamCaching: dco_decode_opt_box_autoadd_bool(arr[2]),
      defaultView: dco_decode_opt_box_autoadd_u_8(arr[3]),
      volume: dco_decode_opt_box_autoadd_u_8(arr[4]),
      refreshOnStart: dco_decode_opt_box_autoadd_bool(arr[5]),
      restreamPort: dco_decode_opt_box_autoadd_u_16(arr[6]),
    );
  }

  @protected
  Source dco_decode_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Source(
      id: dco_decode_opt_box_autoadd_i_64(arr[0]),
      name: dco_decode_String(arr[1]),
      url: dco_decode_opt_String(arr[2]),
      urlOrigin: dco_decode_opt_String(arr[3]),
      username: dco_decode_opt_String(arr[4]),
      password: dco_decode_opt_String(arr[5]),
      sourceType: dco_decode_u_8(arr[6]),
      enabled: dco_decode_bool(arr[7]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Transaction
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  Channel sse_decode_box_autoadd_channel(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_channel(deserializer));
  }

  @protected
  ChannelHttpHeaders sse_decode_box_autoadd_channel_http_headers(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_channel_http_headers(deserializer));
  }

  @protected
  Filters sse_decode_box_autoadd_filters(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_filters(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  Settings sse_decode_box_autoadd_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_settings(deserializer));
  }

  @protected
  Source sse_decode_box_autoadd_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_source(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_16(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  Channel sse_decode_channel(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_url = sse_decode_opt_String(deserializer);
    var var_group = sse_decode_opt_String(deserializer);
    var var_image = sse_decode_opt_String(deserializer);
    var var_mediaType = sse_decode_u_8(deserializer);
    var var_sourceId = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_seriesId = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_groupId = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_favorite = sse_decode_bool(deserializer);
    var var_streamId = sse_decode_opt_box_autoadd_u_64(deserializer);
    return Channel(
        id: var_id,
        name: var_name,
        url: var_url,
        group: var_group,
        image: var_image,
        mediaType: var_mediaType,
        sourceId: var_sourceId,
        seriesId: var_seriesId,
        groupId: var_groupId,
        favorite: var_favorite,
        streamId: var_streamId);
  }

  @protected
  ChannelHttpHeaders sse_decode_channel_http_headers(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_channelId = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_referrer = sse_decode_opt_String(deserializer);
    var var_userAgent = sse_decode_opt_String(deserializer);
    var var_httpOrigin = sse_decode_opt_String(deserializer);
    var var_ignoreSsl = sse_decode_opt_box_autoadd_bool(deserializer);
    return ChannelHttpHeaders(
        id: var_id,
        channelId: var_channelId,
        referrer: var_referrer,
        userAgent: var_userAgent,
        httpOrigin: var_httpOrigin,
        ignoreSsl: var_ignoreSsl);
  }

  @protected
  EPG sse_decode_epg(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_epgId = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_startTime = sse_decode_String(deserializer);
    var var_startTimestamp = sse_decode_i_64(deserializer);
    var var_endTime = sse_decode_String(deserializer);
    return EPG(
        epgId: var_epgId,
        title: var_title,
        description: var_description,
        startTime: var_startTime,
        startTimestamp: var_startTimestamp,
        endTime: var_endTime);
  }

  @protected
  Filters sse_decode_filters(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_query = sse_decode_opt_String(deserializer);
    var var_sourceIds = sse_decode_list_prim_i_64_strict(deserializer);
    var var_mediaTypes = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_viewType = sse_decode_u_8(deserializer);
    var var_page = sse_decode_u_8(deserializer);
    var var_seriesId = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_groupId = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_useKeywords = sse_decode_bool(deserializer);
    return Filters(
        query: var_query,
        sourceIds: var_sourceIds,
        mediaTypes: var_mediaTypes,
        viewType: var_viewType,
        page: var_page,
        seriesId: var_seriesId,
        groupId: var_groupId,
        useKeywords: var_useKeywords);
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Channel> sse_decode_list_channel(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Channel>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_channel(deserializer));
    }
    return ans_;
  }

  @protected
  List<EPG> sse_decode_list_epg(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EPG>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_epg(deserializer));
    }
    return ans_;
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Source> sse_decode_list_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Source>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_source(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Settings sse_decode_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_recordingPath = sse_decode_opt_String(deserializer);
    var var_mpvParams = sse_decode_opt_String(deserializer);
    var var_useStreamCaching = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_defaultView = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_volume = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_refreshOnStart = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_restreamPort = sse_decode_opt_box_autoadd_u_16(deserializer);
    return Settings(
        recordingPath: var_recordingPath,
        mpvParams: var_mpvParams,
        useStreamCaching: var_useStreamCaching,
        defaultView: var_defaultView,
        volume: var_volume,
        refreshOnStart: var_refreshOnStart,
        restreamPort: var_restreamPort);
  }

  @protected
  Source sse_decode_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_url = sse_decode_opt_String(deserializer);
    var var_urlOrigin = sse_decode_opt_String(deserializer);
    var var_username = sse_decode_opt_String(deserializer);
    var var_password = sse_decode_opt_String(deserializer);
    var var_sourceType = sse_decode_u_8(deserializer);
    var var_enabled = sse_decode_bool(deserializer);
    return Source(
        id: var_id,
        name: var_name,
        url: var_url,
        urlOrigin: var_urlOrigin,
        username: var_username,
        password: var_password,
        sourceType: var_sourceType,
        enabled: var_enabled);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_channel(Channel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_channel(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_channel_http_headers(
      ChannelHttpHeaders self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_channel_http_headers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_filters(Filters self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_filters(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_settings(
      Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_source(Source self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_source(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_channel(Channel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_String(self.group, serializer);
    sse_encode_opt_String(self.image, serializer);
    sse_encode_u_8(self.mediaType, serializer);
    sse_encode_opt_box_autoadd_i_64(self.sourceId, serializer);
    sse_encode_opt_box_autoadd_u_64(self.seriesId, serializer);
    sse_encode_opt_box_autoadd_i_64(self.groupId, serializer);
    sse_encode_bool(self.favorite, serializer);
    sse_encode_opt_box_autoadd_u_64(self.streamId, serializer);
  }

  @protected
  void sse_encode_channel_http_headers(
      ChannelHttpHeaders self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.id, serializer);
    sse_encode_opt_box_autoadd_i_64(self.channelId, serializer);
    sse_encode_opt_String(self.referrer, serializer);
    sse_encode_opt_String(self.userAgent, serializer);
    sse_encode_opt_String(self.httpOrigin, serializer);
    sse_encode_opt_box_autoadd_bool(self.ignoreSsl, serializer);
  }

  @protected
  void sse_encode_epg(EPG self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.epgId, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.startTime, serializer);
    sse_encode_i_64(self.startTimestamp, serializer);
    sse_encode_String(self.endTime, serializer);
  }

  @protected
  void sse_encode_filters(Filters self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.query, serializer);
    sse_encode_list_prim_i_64_strict(self.sourceIds, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.mediaTypes, serializer);
    sse_encode_u_8(self.viewType, serializer);
    sse_encode_u_8(self.page, serializer);
    sse_encode_opt_box_autoadd_i_64(self.seriesId, serializer);
    sse_encode_opt_box_autoadd_i_64(self.groupId, serializer);
    sse_encode_bool(self.useKeywords, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_channel(List<Channel> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_channel(item, serializer);
    }
  }

  @protected
  void sse_encode_list_epg(List<EPG> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_epg(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_source(List<Source> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_source(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_settings(Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.recordingPath, serializer);
    sse_encode_opt_String(self.mpvParams, serializer);
    sse_encode_opt_box_autoadd_bool(self.useStreamCaching, serializer);
    sse_encode_opt_box_autoadd_u_8(self.defaultView, serializer);
    sse_encode_opt_box_autoadd_u_8(self.volume, serializer);
    sse_encode_opt_box_autoadd_bool(self.refreshOnStart, serializer);
    sse_encode_opt_box_autoadd_u_16(self.restreamPort, serializer);
  }

  @protected
  void sse_encode_source(Source self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_String(self.urlOrigin, serializer);
    sse_encode_opt_String(self.username, serializer);
    sse_encode_opt_String(self.password, serializer);
    sse_encode_u_8(self.sourceType, serializer);
    sse_encode_bool(self.enabled, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class TransactionImpl extends RustOpaque implements Transaction {
  // Not to be used by end users
  TransactionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TransactionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Transaction,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Transaction,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TransactionPtr,
  );
}
