// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// These functions are ignored because they are not marked as `pub`: `build_xtream_url`, `convert_xtream_live_to_channel`, `episode_to_channel`, `get_cat_name`, `get_media_type_string`, `get_url`, `get_xtream_http_data`, `process_xtream`, `xtream_epg_to_epg`
// These types are ignored because they are not used by any `pub` functions: `XtreamCategory`, `XtreamEPGItem`, `XtreamEPG`, `XtreamEpisodeInfo`, `XtreamEpisode`, `XtreamSeries`, `XtreamStream`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

Future<void> getXtream({required Source source, required bool wipe}) =>
    RustLib.instance.api.crateApiXtreamGetXtream(source: source, wipe: wipe);

Future<void> getEpisodes({required Channel channel}) =>
    RustLib.instance.api.crateApiXtreamGetEpisodes(channel: channel);

Future<List<EPG>> getShortEpg({required Channel channel}) =>
    RustLib.instance.api.crateApiXtreamGetShortEpg(channel: channel);
