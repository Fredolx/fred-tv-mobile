// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// These functions are ignored because they are not marked as `pub`: `apply_migrations`, `create_connection_pool`, `create_or_find_source_by_name`, `delete_channels_by_source`, `delete_groups_by_source`, `do_tx`, `generate_placeholders`, `get_and_create_sqlite_db_path`, `get_channel_headers_by_id`, `get_conn`, `get_keywords_sql`, `get_or_insert_group`, `get_settings`, `get_source_from_id`, `insert_channel`, `row_to_channel_headers`, `row_to_channel`, `row_to_group`, `row_to_source`, `search_group`, `series_has_episodes`, `set_channel_group_id`, `to_sql_like`, `to_to_sql`, `update_settings`, `wipe`

Future<void> deleteDatabase() =>
    RustLib.instance.api.crateApiSqlDeleteDatabase();

Future<void> createOrInitializeDb() =>
    RustLib.instance.api.crateApiSqlCreateOrInitializeDb();

Future<void> insertChannelHeaders(
        {required Transaction tx, required ChannelHttpHeaders headers}) =>
    RustLib.instance.api
        .crateApiSqlInsertChannelHeaders(tx: tx, headers: headers);

Future<List<Channel>> search({required Filters filters}) =>
    RustLib.instance.api.crateApiSqlSearch(filters: filters);

Future<void> deleteSource({required PlatformInt64 id}) =>
    RustLib.instance.api.crateApiSqlDeleteSource(id: id);

Future<bool> sourceNameExists({required String name}) =>
    RustLib.instance.api.crateApiSqlSourceNameExists(name: name);

Future<void> favoriteChannel(
        {required PlatformInt64 channelId, required bool favorite}) =>
    RustLib.instance.api
        .crateApiSqlFavoriteChannel(channelId: channelId, favorite: favorite);

Future<List<Source>> getSources() =>
    RustLib.instance.api.crateApiSqlGetSources();

Future<List<Source>> getEnabledSources() =>
    RustLib.instance.api.crateApiSqlGetEnabledSources();

Future<void> updateSource({required Source source}) =>
    RustLib.instance.api.crateApiSqlUpdateSource(source: source);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>
abstract class Transaction implements RustOpaqueInterface {}
